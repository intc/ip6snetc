#!/usr/bin/env luajit
-- vim: ft=lua ts=4

--[[--------------------------------------------------------------------------------------------------------------
	Copyright (C) 2019,2020,2021,2022 Antti Antinoja

	This program and the accompanying materials are made available under the
	terms of the Eclipse Public License 2.0 which is available at
	http://www.eclipse.org/legal/epl-2.0.

	SPDX-License-Identifier: EPL-2.0
--------------------------------------------------------------------------------------------------------------]]--

--[[ Module specific globals ---------------------------------------------------------------------------------]]--

local bit = require "bit"  --< BitOp: https://bitop.luajit.org/ >--

local band, bor, bxor, bnot, lshift, rshift =
	bit.band, bit.bor, bit.bxor, bit.bnot, bit.lshift, bit.rshift

local sprintf=string.format

local function rxo(table)
	return setmetatable({}, {
		__next = function(t, k) return next(table, k) end,
		__index = table,
		__newindex = function() error("R/O table") end,
	})
end

local my = {
	ab_updated = "2022-06-02",
	version = "0.2",
	debug = false
}

--[[ LINKS -------------------------------------------------------------------------------------------------------
	* https://www.iana.org/assignments/ipv6-address-space/ipv6-address-space.xhtml
	* https://www.iana.org/assignments/iana-ipv6-special-registry/iana-ipv6-special-registry.xhtml
--------------------------------------------------------------------------------------------------------------]]--

my.i6ab = rxo {
	rxo {
		0, 0, 0, 0,  0, 0, 0, 1, pf = 128,
		dsc = "Loopback Address",
		rfc = "RFC4291",
		src = false, dst = false, fwd = false, glb = false, rbp = true
	},
	rxo {
		0, 0, 0, 0,  0, 0, 0, 0, pf = 128,
		dsc = "Unspecified Address",
		rfc = "RFC4921",
		src = true,  dst = false, fwd = false, glb = false, rbp = true
	},
	rxo {
		0, 0, 0, 0,  0, 0xffff, 0, 0, pf = 96,
		dsc = "IPv4-mapped Addresses",
		rfc = "RFC4291",
		src = false, dst = false, fwd = false, glb = false, rbp = true
	},
	rxo {
		0x64, 0xff9b, 0, 0,  0, 0, 0, 0, pf = 96,
		dsc = "IPv4-IPv6 Translators",
		rfc = "RFC6052",
		src = true,  dst = true,  fwd = true,  glb = true,  rbp = false
	},
	rxo {
		0x64, 0xff9b, 1, 0,  0, 0, 0, 0, pf = 48,
		dsc = "Local-Use IPv4/IPv6 Translation Prefix",
		rfc = "RFC8215",
		src = true,  dst = true,  fwd = true,  glb = false, rbp = false
	},
	rxo {
		0x100, 0, 0, 0,  0, 0, 0, 0, pf = 64,
		dsc = "Discard-Only Address Block",
		rfc = "RFC6666",
		src = true,  dst = true,  fwd = true,  glb = false, rbp = false
	},
	rxo {
		0x2001, 0, 0, 0,  0, 0, 0, 0, pf = 23,
		dsc = "Initial IPv6 Sub-TLA ID Assignments",
		rfc = "RFC2928",
		src = false, dst = false, fwd = false, glb = false, rbp = false
	},
	rxo {
		0x2001, 0, 0, 0,  0, 0, 0, 0, pf = 32,
		dsc = "Teredo: Tunneling IPv6 over UDP through NATs",
		rfc = "RFC4380, RFC8190",
		src = true,  dst = true,  fwd = true,  glb = nil,   rbp = false
	},
	rxo {
		0x2001, 1, 0, 0,  0, 0, 0, 1, pf = 128,
		dsc = "Port Control Protocol (PCP) Anycast Address",
		rfc = "RFC7723",
		src = true,  dst = true,  fwd = true,  glb = true,  rbp = false
	},
	rxo {
		0x2001, 1, 0, 0,  0, 0, 0, 2, pf = 128,
		dsc = "Traversal Using Relays around NAT (TURN) Server Auto Discovery",
		rfc = "RFC8155",
		src = true,  dst = true,  fwd = true,  glb = true,  rbp = false
	},
	rxo {
		0x2001, 2, 0, 0,  0, 0, 0, 0, pf = 48,
		dsc = "IPv6 Benchmarking Methodology for Network Interconnect Devices",
		rfc = "RFC5180, RFC Errata 1752",
		src = true,  dst = true,  fwd = true,  glb = false, rbp = false
	},
	rxo {
		0x2001, 3, 0, 0,  0, 0, 0, 0, pf = 32,
		dsc = "Automatic Multicast Tunneling (AMT)",
		rfc = "RFC7450",
		src = true,  dst = true,  fwd = true,  glb = true,  rbp = false
	},
	rxo {
		0x2001, 4, 0x112, 0,  0, 0, 0, 0, pf = 48,
		dsc = "AS112 Redirection Using DNAME",
		rfc = "RFC7535",
		src = true,  dst = true,  fwd = true,  glb = true,  rbp = false
	},
	rxo {
		0x2001, 0x10, 0, 0,  0, 0, 0, 0, pf = 28,
		dsc = "Deprecated (previously ORCHID)",
		rfc = "RFC4843",
		src = nil,   dst = nil,   fwd = nil,   glb = nil,   rbp = nil
	},
	rxo {
		0x2001, 0x20, 0, 0,  0, 0, 0, 0, pf = 28,
		dsc = "An IPv6 Prefix for ORCHIDv2",
		rfc = "RFC4843",
		src = true,  dst = true,  fwd = true,  glb = true,  rbp = false
	},
	rxo {
		0x2001, 0xdb8, 0, 0,  0, 0, 0, 0, pf = 32,
		dsc = "IPv6 Address Prefix Reserved for Documentation",
		rfc = "RFC3849",
		src = false, dst = false, fwd = false, glb = false, rbp = false
	},
	rxo {
		0x2002, 0, 0, 0,  0, 0, 0, 0, pf = 16,
		dsc = "6to4 - Connection of IPv6 Domains via IPv4 Clouds",
		rfc = "RFC3056",
		src = true,  dst = true,  fwd = true,  glb = nil,   rbp = false
	},
	rxo {
		0x2620, 0x4f, 0x8000, 0,  0, 0, 0, 0, pf = 48,
		dsc = "Direct Delegation AS112 Service",
		rfc = "RFC7534",
		src = true,  dst = true,  fwd = true,  glb = true,  rbp = false
	},
	rxo {
		0xfc00, 0, 0, 0,  0, 0, 0, 0, pf = 7,
		dsc = "Unique-Local",
		rfc = "RFC4193, RFC8190",
		src = true,  dst = true,  fwd = true,  glb = false, rbp = false
	},
	rxo {
		0xfe80, 0, 0, 0,  0, 0, 0, 0, pf = 10,
		dsc = "Link Local Unicast",
		rfc = "RFC4291",
		src = true,  dst = true,  fwd = false, glb = false, rbp = true
	}
}

my.cli = rxo {
	["--split"] = { active = false, value = nil },
	["-s"] = rxo { long = "--split" },

	["--help"] = { active = false, value = nil },
	["-h"] = rxo { long = "--help" },

	["--show-np"] = { active = true, value = nil },
	["-p"] = rxo { long = "--show-np" }
}
	
local m = rxo(my); my = nil

--[[ IPv6 compressed format look-up table related ------------------------------------------------------------]]--

--   fmt_mask(n6)
--   create and return a 8 bit mask with "1" presenting a non-zero 16 bit block
--   examples:
--   | 2001::1/64             | 0y10000001 |
--   | 2001:1:0:0:7:0:0:01/64 | 0y11001001 |
local function fmt_mask(n6)
	local fm = 0
	for n = 1, 8 do
		if n6[n] ~= 0 then
			fm = bor( fm, lshift(1, 8-n) )
		end
	end
	return fm
end

local function ret_gapl()
	return {
		  [0] = {l = 1, r = 8},   [1] = {l = 1, r = 7},   [2] = {l = 1, r = 6},   [3] = {l = 1, r = 6},   [4] = {l = 1, r = 5},
		  [5] = {l = 1, r = 5},   [6] = {l = 1, r = 5},   [7] = {l = 1, r = 5},   [8] = {l = 1, r = 4},   [9] = {l = 1, r = 4},
		 [10] = {l = 1, r = 4},  [11] = {l = 1, r = 4},  [12] = {l = 1, r = 4},  [13] = {l = 1, r = 4},  [14] = {l = 1, r = 4},
		 [15] = {l = 1, r = 4},  [16] = {l = 5, r = 8},  [17] = {l = 1, r = 3},  [18] = {l = 1, r = 3},  [19] = {l = 1, r = 3},
		 [20] = {l = 1, r = 3},  [21] = {l = 1, r = 3},  [22] = {l = 1, r = 3},  [23] = {l = 1, r = 3},  [24] = {l = 1, r = 3},
		 [25] = {l = 1, r = 3},  [26] = {l = 1, r = 3},  [27] = {l = 1, r = 3},  [28] = {l = 1, r = 3},  [29] = {l = 1, r = 3},
		 [30] = {l = 1, r = 3},  [31] = {l = 1, r = 3},  [32] = {l = 4, r = 8},  [33] = {l = 4, r = 7},  [34] = {l = 4, r = 6},
		 [35] = {l = 4, r = 6},  [36] = {l = 1, r = 2},  [37] = {l = 1, r = 2},  [38] = {l = 1, r = 2},  [39] = {l = 1, r = 2},
		 [40] = {l = 6, r = 8},  [41] = {l = 1, r = 2},  [42] = {l = 1, r = 2},  [43] = {l = 1, r = 2},  [44] = {l = 1, r = 2},
		 [45] = {l = 1, r = 2},  [46] = {l = 1, r = 2},  [47] = {l = 1, r = 2},  [48] = {l = 5, r = 8},	 [49] = {l = 5, r = 7},
		 [50] = {l = 1, r = 2},  [51] = {l = 1, r = 2},  [52] = {l = 1, r = 2},  [53] = {l = 1, r = 2},	 [54] = {l = 1, r = 2},
		 [55] = {l = 1, r = 2},  [56] = {l = 6, r = 8},  [57] = {l = 1, r = 2},  [58] = {l = 1, r = 2},  [59] = {l = 1, r = 2},
		 [60] = {l = 1, r = 2},  [61] = {l = 1, r = 2},  [62] = {l = 1, r = 2},  [63] = {l = 1, r = 2},	 [64] = {l = 3, r = 8},
		 [65] = {l = 3, r = 7},  [66] = {l = 3, r = 6},  [67] = {l = 3, r = 6},  [68] = {l = 3, r = 5},  [69] = {l = 3, r = 5},
		 [70] = {l = 3, r = 5},  [71] = {l = 3, r = 5},  [72] = {l = 6, r = 8},  [73] = {l = 3, r = 4},	 [74] = {l = 3, r = 4},
		 [75] = {l = 3, r = 4},  [76] = {l = 3, r = 4},  [77] = {l = 3, r = 4},  [78] = {l = 3, r = 4},	 [79] = {l = 3, r = 4},
	 	 [80] = {l = 5, r = 8},  [81] = {l = 5, r = 7},  [82] = {l = 5, r = 6},  [83] = {l = 5, r = 6},  [84] = {l = 7, r = 8},
		 [88] = {l = 6, r = 8},  [89] = {l = 6, r = 7},  [92] = {l = 7, r = 8},  [96] = {l = 4, r = 8},  [97] = {l = 4, r = 7},
		 [98] = {l = 4, r = 6},  [99] = {l = 4, r = 6}, [100] = {l = 4, r = 5}, [101] = {l = 4, r = 5},	[102] = {l = 4, r = 5},
		[103] = {l = 4, r = 5},	[104] = {l = 6, r = 8},	[105] = {l = 6, r = 7},	[108] = {l = 7, r = 8},	[112] = {l = 5, r = 8},
		[113] = {l = 5, r = 7},	[114] = {l = 5, r = 6},	[115] = {l = 5, r = 6},	[116] = {l = 7, r = 8},	[120] = {l = 6, r = 8},
		[121] = {l = 6, r = 7},	[124] = {l = 7, r = 8},	[128] = {l = 2, r = 8},	[129] = {l = 2, r = 7},	[130] = {l = 2, r = 6},
		[131] = {l = 2, r = 6},	[132] = {l = 2, r = 5},	[133] = {l = 2, r = 5},	[134] = {l = 2, r = 5},	[135] = {l = 2, r = 5},
		[136] = {l = 2, r = 4},	[137] = {l = 2, r = 4},	[138] = {l = 2, r = 4},	[139] = {l = 2, r = 4},	[140] = {l = 2, r = 4},
		[141] = {l = 2, r = 4},	[142] = {l = 2, r = 4},	[143] = {l = 2, r = 4},	[144] = {l = 5, r = 8},	[145] = {l = 5, r = 7},
		[146] = {l = 2, r = 3},	[147] = {l = 2, r = 3},	[148] = {l = 2, r = 3},	[149] = {l = 2, r = 3},	[150] = {l = 2, r = 3},
		[151] = {l = 2, r = 3},	[152] = {l = 6, r = 8},	[153] = {l = 2, r = 3},	[154] = {l = 2, r = 3},	[155] = {l = 2, r = 3},
		[156] = {l = 2, r = 3},	[157] = {l = 2, r = 3},	[158] = {l = 2, r = 3},	[159] = {l = 2, r = 3},	[160] = {l = 4, r = 8},
		[161] = {l = 4, r = 7},	[162] = {l = 4, r = 6},	[163] = {l = 4, r = 6},	[164] = {l = 4, r = 5},	[165] = {l = 4, r = 5},
		[166] = {l = 4, r = 5},	[167] = {l = 4, r = 5},	[168] = {l = 6, r = 8},	[169] = {l = 6, r = 7},	[172] = {l = 7, r = 8},
		[176] = {l = 5, r = 8},	[177] = {l = 5, r = 7},	[178] = {l = 5, r = 6},	[179] = {l = 5, r = 6},	[180] = {l = 7, r = 8},
		[184] = {l = 6, r = 8},	[185] = {l = 6, r = 7},	[188] = {l = 7, r = 8},	[192] = {l = 3, r = 8},	[193] = {l = 3, r = 7},
		[194] = {l = 3, r = 6},	[195] = {l = 3, r = 6},	[196] = {l = 3, r = 5},	[197] = {l = 3, r = 5},	[198] = {l = 3, r = 5},
		[199] = {l = 3, r = 5},	[200] = {l = 6, r = 8},	[201] = {l = 3, r = 4},	[202] = {l = 3, r = 4},	[203] = {l = 3, r = 4},
		[204] = {l = 3, r = 4},	[205] = {l = 3, r = 4}, [206] = {l = 3, r = 4},	[207] = {l = 3, r = 4},	[208] = {l = 5, r = 8},
		[209] = {l = 5, r = 7},	[210] = {l = 5, r = 6},	[211] = {l = 5, r = 6},	[212] = {l = 7, r = 8},	[216] = {l = 6, r = 8},
		[217] = {l = 6, r = 7},	[220] = {l = 7, r = 8}, [224] = {l = 4, r = 8},	[225] = {l = 4, r = 7},	[226] = {l = 4, r = 6},
		[227] = {l = 4, r = 6},	[228] = {l = 4, r = 5},	[229] = {l = 4, r = 5},	[230] = {l = 4, r = 5},	[231] = {l = 4, r = 5},
		[232] = {l = 6, r = 8},	[233] = {l = 6, r = 7},	[236] = {l = 7, r = 8},	[240] = {l = 5, r = 8},	[241] = {l = 5, r = 7},
		[242] = {l = 5, r = 6},	[243] = {l = 5, r = 6}, [244] = {l = 7, r = 8},	[248] = {l = 6, r = 8},	[249] = {l = 6, r = 7},
		[252] = {l = 7, r = 8},
	}
end

--[[ IPv6 presentation and network calculation ---------------------------------------------------------------]]--

--  bm6(pref):
--  creates and returns a 128 bit (8 x 16 bit lua table) wide binary presentation generated from (pref)ix.
local function bm6(pref)
	local bm = { 0, 0, 0, 0, 0, 0, 0, 0 } --< Prefill the binary prefix table (8 x 16 bit blocks)
	for n = 1, 8 do
		if pref > (16 * n) then
			bm[n] = 0xFFFF
		else
			if pref == (16 * n) then
				bm[n] = 0xFFFF
			else
				-- Example:
				--    pref == 17 we'll enter here while n == 2
				--    So the MSB of 2nd 16 bit block needs to be set to 1, rest of the bits 0
				--    t = 2^(16 * 2 - 17  ) - 1 == 0x7fff
				local t = 2^(16 * n - pref) - 1
				--                                        1111111
				--                                        6543210987654321
				--         0xffff - 0x7fff == 0x8000 == 0y1000000000000000
				bm[n] = 0xFFFF - t
			end
			break;
		end
	end
	return bm
end

--  fmt_str_get(n6, fmt):
--  convert from eight 16 bit binary blocks to compressed IPv6 format presentation (string)
local function fmt_str_get(n6, fmt)
	local n = 1
	local str = ""
	if fmt.l == 1 then
		-- address starts with 0: address string mush begin with a ":"
		str = ":"
	end
	while (n < 9) do
		if n == fmt.l then
			-- we hit a "zero gap": append ":" and skip n to next printable 16 bit field
			str = str..":"
			n = fmt.r + 1
		else
			str = str..string.format( "%x", n6[n] )
			if n ~= 8 then str = str..":" end
			n = n + 1
		end
	end
	return str
end

local function adr_str_get(n6)
	local str=""
	local fmt = gapl[ fmt_mask(n6) ]                            --< Get formatting rule
	if fmt then
		str = fmt_str_get(n6, fmt)
	else
		for n = 1, 7 do
			str = str..string.format( "%x", n6[n] )..":"
		end
		str = str..string.format( "%x", n6[8] )
	end
	return str
end

local function net_str_get(n6, bm)
	local str=""
	local t6 = {}
	for n = 1, 8 do t6[n] = band( n6[n], bm[n] ) end            --< Apply mask
	local fmt = gapl[ fmt_mask(t6) ]                            --< Get formatting rule
	if fmt then
		str = fmt_str_get(t6, fmt)
	else
		for n = 1, 7 do
			str = str..string.format( "%x", t6[n] )..":"
		end
		str = str..string.format( "%x", t6[8] )
	end
	return str.."/"..n6.pf
end

local function pfx_str_get(n6, bm)
	local str = ""
	for n = 1, 7 do
		str = str..string.format("%04x", bm[n])..":"
	end
	str = str..string.format("%04x", bm[8])
	return str
end

local function first_adr_str_get(n6, bm)
	local seg
	local str = ""
	for n = 1, 7 do
		seg = band(n6[n], bm[n])
		str = str..sprintf("%04x:", seg)
	end
	local n = 8
	seg = band(n6[n], bm[n])
	str = str..sprintf("%04x", seg)
	return str
end

local function last_adr_str_get(n6, bm)
	local seg
	local str = ""
	for n = 1, 7 do
		-- Note: BitOp operates on 32 bit integers - hence
		-- adding 0xFFFF0000 to the mask before inversion:
		seg = bor( band(n6[n], bm[n]), bnot( bor(0xFFFF0000, bm[n]) ) )
		str = str..sprintf("%04x:", seg)    --< This is expensive, but not because of stroing.format!
	end
	local n = 8
	seg = bor( band(n6[n], bm[n]), bnot( bor(0xFFFF0000, bm[n]) ) )
	str = str..sprintf("%04x", seg)
	return str
end

local function first_snet_get(n6, bm, prefix)
	local new_net = { 0, 0, 0, 0,   0, 0, 0, 0,  pf=0 }
	for n = 1, 8 do
		new_net[n] = band(n6[n], bm[n])
	end
	new_net.pf = prefix
	return new_net
end

local function is_a_member_of_b(a6, b6)
	local abm, bbm = bm6(a6.pf), bm6(b6.pf)
	if a6.pf < b6.pf then return false end
	local a_masked = first_snet_get(a6, bbm, 0)
	local b_masked = first_snet_get(b6, bbm, 0)
	local columns = math.ceil(b6.pf/128*8)
	local match = 1
	for col = 1, columns do
		if a_masked[col] ~= b_masked[col] then return false end
	end
	return true
end

local function addr_blck_get(a6)
	-- see: http://lua-users.org/wiki/GeneralizedPairsAndIpairs
	-- local next begin
	local rawnext = next
	local function next(t,k)
		local m = getmetatable(t)
		local n = m and m.__next or rawnext
		 return n(t,k)
	end
	-- local next end
	for k, b6 in next, m.i6ab do
		if is_a_member_of_b(a6, b6) then
			return b6
		end
	end
	return nil
end

local function wide_adder_get(bm)
	local adder = 0
	for n = 1, 7 do
		if bm[n+1] == 0 then
			local t = bm[n] - 1
			adder = bnot( bor(0xFFFF0000,t) ) * 2^(16*(8-n))
			break
		end
	end
	if adder == 0 then
		local n = 8
		local t = bm[n] - 1
		adder = bnot( bor(0xFFFF0000,t) ) * 2^(16*(8-n))
	end
	return adder
end

--  lsc_adder_and_mask_set(bm_top, bm_new, aa):
--  calculate incerementation value needed for iterating between subnets. Also generates LSC mask
local function lsc_adder_and_mask_set(bm_top, bm_new, aa)
	local n=0
	while aa.MSC==0 do       --< Search first 16 bit block which differs. Save the column in question to MSC
		n = n + 1
		if bm_top[n] ~= bm_new[n] then
			aa.MSC=n
			break
		end
	end
	for n = n, 8 do          --< Search last 16 bit block which differs. Save the column in question to LSC
		if bm_top[n] == bm_new[n] then
			aa.LSC = n - 1
			break
		else                 --< Even the last column differs
			aa.LSC = 8
		end
	end
	aa.adder = bnot( bor (0xFFFF0000, bm_new[aa.LSC] - 1) )
	aa.mask = bnot( bor(0xFFFF0000, bm_top[aa.LSC]) )
end

--  col_by_one_inc(i6, bm_top, col):
--  increments columns above LSC
local function col_by_one_inc(i6, bm_top, col)
	local c_msk = bnot( bor(0xFFFF0000, bm_top[col]) ) --< Invert columns prefix and from a mask.
	local c_val = band ( c_msk, i6[col] ) + 1          --< Increment by one
	if c_val > 0xFFFF then                             --< We overflowed this column so expand the left (up)
		if col_by_one_inc(i6, bm_top, col-1) == 2 then
			return 2                                   --< OverFlow
		end
		c_val = band(0x0000FFFF, c_val)
	end
	if c_val > c_msk then                              --< Passed the mask -> Return with overflow status
		return 2                                       --< OverFlow
	end
	i6[col] = i6[col] + 1
	return 0
end

--  lsc_by_adder_inc(i6, bm_top, aa):
--  increment LSC by adder and, if the mask allows, expands to higher columns when overflowig LSC
local function lsc_by_adder_inc(i6, bm_top, aa)
	local col = aa.LSC
	local c_val = band ( aa.mask, i6[col] ) + aa.adder --< Form columns masked value & increment it by adder.
	if col == aa.MSC then                              --< Networks don't expand above LSC.
		if c_val > aa.mask then                        --< Incrementation exceeded the mask -> no more nets.
			return 2                                   --< OverFlow
		end
	end
	if c_val > 0xFFFF then                             --< Increment to higher column (if allowed)
		if col_by_one_inc(i6, bm_top, col - 1) == 2 then
			return 2                                   --< OverFlow
		end
	end
	i6[col] = i6[col] + aa.adder
	return 0
end

local function top_net_print(n6)
	local bm = bm6(n6.pf)
	local adb = addr_blck_get(n6)
	print( " --- IPv6 network / address information:\n" )
	print( " Address "..adr_str_get(n6) )
	print( " Network "..net_str_get(n6, bm) )
	print( "  Prefix "..pfx_str_get(n6, bm) )
	print( "    from "..first_adr_str_get(n6, bm) )
	print( "      to "..last_adr_str_get(n6, bm) )
	if adb then
		print( "    Type "..adb.dsc )
		print( "     RFC "..adb.rfc )
		io.write( "     src " ); print( adb.src )
		io.write( "     dst " ); print( adb.dst )
		io.write( "     fwd " ); print( adb.fwd )
		io.write( "  global " ); print( adb.glb )
		io.write( "IPv6 res " ); print( adb.rbp )
	end
	print ""
end

local function subnets_print(n6, nprefix)
	local bm = bm6(n6.pf)
	local bm_new = bm6(nprefix)
	local a_top = wide_adder_get(bm)
	local a_new = wide_adder_get(bm_new)
	local atomic_adder = {
		adder = nil,
		mask = nil,         --< Portion of the top level prefix shadowing LSC.
		MSC = 0,            --< MSC (most significant col) - highest column the incremantation will touch.
		LSC = 0             --< LSC (least significant col) - column from which "adder" is extracted from.
	}
	local nets = a_top/a_new
	local i6 = first_snet_get(n6, bm, nprefix)
	lsc_adder_and_mask_set(bm, bm_new, atomic_adder) --< NOTE: atomic_adder will be modified!
	print( " --- Subnet data:\n" )
	print( "  Subnet Prefix /"..nprefix )
	print( " Subnets "..nets.."\n" )
	if m.debug then
		print( "--- Subnet debug information:" )
		print( "   adder 0x"..string.format("%x", a_new) )
		print( "     MSC "..atomic_adder.MSC )
		print( "     LSC "..atomic_adder.LSC )
		print( "  aadder 0x"..string.format("%x", atomic_adder.adder) )
		print( "--- End of subnet debug information" )
	end
	if m.cli["--show-np"].active then
		print( " Network "..net_str_get(i6, bm_new) )
		print( "  Prefix "..pfx_str_get(i6, bm_new) )
	end
	print( "    from "..first_adr_str_get(i6, bm_new) )
	print( "      to "..last_adr_str_get(i6, bm_new) )
	while 1 do
		if lsc_by_adder_inc(i6, bm, atomic_adder) == 2 then break end
		if m.cli["--show-np"].active then
			print ""
			print( " Network "..net_str_get(i6, bm_new) )
			print( "  Prefix "..pfx_str_get(i6, bm_new) )
		end
		print( "    from "..first_adr_str_get(i6, bm_new) )
		print( "      to "..last_adr_str_get(i6, bm_new) )
	end
end

local function i6_str_prefix_get(ip_s, tnet)
	local tmp = ip_s:match("/%d%d?%d?$") --< 1st digit is mandatory, two consecutive ones are optional
	if tmp == nil then
		tmp = ip_s:match("/..?.?.?")     --< Can we give user some clue what's wrong with the given prefix?
		if tmp == nil then
			return false, "Error: Missing prefix."
		else
			return false, "Error: Given prefix: "..ip_s:match("/.?.?.?.?")..".."
		end
	end
	tmp = tmp:gsub("^/", "")             --< Eliminate leading '/' so we can convert tmp to a number
	tnet.pf = tonumber(tmp)
	if tnet.pf > 128 then                --< '-' not allowed so no need to check for negative numbers
		return false,
		"Error: Given prefix: /"..tnet.pf..". IPv6 defined prefix range: 0 - 128"
	end
	return true
end

-- str_to_bar(str):
-- convert hex character segments in (str) to an array of "integers" and return the array
local function str_to_bar(str)
	local ar = {}
	for n in str:gmatch "%x+" do
		local tmp = n
		if #tmp > 4 then
			return nil, "Too many digits in segment ("..tmp..")"
		end
		ar[#ar + 1] = tonumber(n,16)
	end
	if #ar > 8 then
		return nil, "Too many ("..#ar..") address segments"
	else
		return ar
	end
end

local function i6_str_parse(ip_s, tnet)
	-- check against allowed symbols
	if ip_s:find( "[^%x:/]" ) then
		return false, "Illegal character(s)"
	end
	-- check against maximum length
	if #ip_s > 43 then
		return false, "Address string too long!"
	end
	-- extract prefix
	local status, emsg = i6_str_prefix_get(ip_s, tnet)
	if not status then return false, emsg end
	ip_s = ip_s:gsub("/.*$", "")          --< Trim prefix
	-- extract address
	local dcol = ip_s:gmatch("()::")	  --< Return iterating function which returns "::" position in ip_s
	local split = dcol()
	if dcol() then                        --< This works because dcol is an iterating function
		return false, "Only one \"::\" sequence allowed"
	end
	if split then                         --< Handle splitted (compressed) addrress, left & right side
		local left_ar, emsg = str_to_bar( ip_s:sub(1, split - 1) )
		if not left_ar then return false, emsg end
		local right_ar, emsg = str_to_bar( ip_s:sub(split+2, #ip_s) )
		if not right_ar then return false, emsg end
		if #right_ar + #left_ar > 7 then  --< 7 will allow single zero segment to be "compressed". Is this OK?
			return false, "Too many segments in compressed address"
		end
		-- populate left side of "::"
		for a = 1, #left_ar do            --< a)scending
			tnet[a] = left_ar[a]
		end
		-- populate right side of "::"
		local ti = 9
		for d = #right_ar, 1, -1 do       --< d)escending
			ti = ti - 1
			tnet[ti] = right_ar[d]
		end
	else                                  --< Handle full (not compressed) address
		local ar, emsg = str_to_bar(ip_s)
		if not ar then return false, emsg end
		if #ar < 8 then
			return false,
			"Less than 8 segements in uncompressed array"
		end
		for a = 1, 8 do tnet[a] = ar[a] end
	end
	return true
end

local function i6_prefix_str_to_int(pref_s)
	if pref_s:find("[^%d]") then
		return nil,
		"Illegal characters in subnet prefix"
	end
	if #pref_s > 3 then
		return nil,
		"Subnet prefix has too many characters (max: 3)"
	end
	local nps=pref_s:match("^%d%d?%d?$")
	local np = tonumber(nps)
	if np > 128 then
		return nil,
		"Subnet prefix value out of bounds (0 - 128)"
	end
	return np
end

--[[ Some help, cli parsing, main and notes ------------------------------------------------------------------]]--

local function usage_show(cmd)
	if cmd == "error_exit" then
		usage_show()
		os.exit(1)
	else
		print "Usage: ip6snetc <IPv6 network address> [<subnet prefix>]"
	end
end

local function cli_opts(arg)
	local tnet = { 0, 0, 0, 0,  0, 0, 0, 0, pf=0 }
	-- Check against allowed number of arguments
	if #arg == 0 then usage_show(); os.exit(0)  end
	if #arg > 2 then
		io.stderr:write("Error: Too many arguments\n")
		usage_show("error_exit")
	end
	-- Parse given IPv6 network / address	
	local status, emsg = i6_str_parse(arg[1], tnet)
	if not status then io.stderr:write("Error: "..emsg.."\n"); usage_show("error_exit") end
	local np = 0
	-- Handle optional subnet prefix
	if arg[2] then
		np, emsg = i6_prefix_str_to_int(arg[2])
		if not np then io.stderr:write("Error: "..emsg.."\n"); usage_show("error_exit") end
		if np <= tnet.pf then
			io.stderr:write("Error: Subnet prefix equals, or exceeds, network size\n")
			usage_show("error_exit")
		end
	end
	return tnet, np
end

local function main(arg)
	local tnet, np = cli_opts(arg)
	gapl = ret_gapl()
	top_net_print(tnet)
	if (np > 0 ) then subnets_print(tnet, np) end
end
main(arg)
